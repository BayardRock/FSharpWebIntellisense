@section css
{
    <link href="~/content/codemirror.css" rel="stylesheet" />
}

@section scripts
{
   
    <script src="~/Scripts/intellisense.js"></script>
    <script src="~/scripts/codemirror/codemirror.js"></script>
    <script src="~/scripts/codemirror/codemirror-intellisense.js"></script>
    <script src="~/scripts/codemirror/codemirror-compiler.js"></script>
    <script src="~/scripts/codemirror/mode/fsharp.js"></script>
    <script src="~/scripts/jquery.signalR-2.0.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        $(function ()
        {
            // setup the CodeMirror editor with fsharp mode
            var editor = CodeMirror(document.getElementById('editor'),
            {
                value: "let x = 1",
                mode: 'fsharp',
                lineNumbers: true
            });
            editor.focus();

            // request errors from the server
            editor.compiler = new Compiler(editor, function ()
            {
                interactiveSession.server.compile(editor.getValue());
            });

            // request declarations from the server
            editor.intellisense = new Intellisense(editor, function (position)
            {
                interactiveSession.server.getDeclarations(editor.getValue(), position.lineIndex + 1, position.columnIndex);
            }, function (position)
            {
                interactiveSession.server.getMethods(editor.getValue(), position.lineIndex + 1, position.columnIndex - 2);
            });

            var interactiveSession = $.connection.interactiveSessionHub;

            // called by the server whenever intellisense declarations are ready
            interactiveSession.client.sendDeclarations = function (declarations)
            {
                if (declarations.length > 0)
                {
                    var newDeclarations = declarations.map(function (item)
                    {
                        return { name: item.Name, glyph: item.Glyph, documentation: item.Documentation };
                    });
                    editor.intellisense.setDeclarations(newDeclarations);
                }
            };

            // called by the server whenever intellisense declarations are ready
            interactiveSession.client.sendMethods = function (methods)
            {
                editor.intellisense.setMethods(methods);
            };

            // called by the server whenever errors are ready
            interactiveSession.client.sendErrors = function (errors)
            {
                var newErrors = errors.map(function (item)
                {
                    return { startLine: item.StartLine, startColumn: item.StartColumn, endLine: item.EndLine, endColumn: item.EndColumn, message: item.Message };
                });
                editor.compiler.updateMarkers(newErrors);
            };

            // start signalr
            $.connection.hub.start()
                .done(function (signalr)
                {
                    console.log('done()', signalr);
                })
                .fail(function (ex)
                {
                    alert('Unable to connect to signalr: ' + ex.message)
                });
        });
    </script>
}

<h1>CodeMirror - SignalR</h1>
<div id="editor"></div>